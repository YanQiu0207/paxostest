# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import paxos_pb2 as paxos__pb2


class PaxosStub(object):
    """python -m grpc_tools.protoc -I protos --python_out=. --pyi_out=. --grpc_python_out=. protos/paxos.proto

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Propose = channel.unary_unary(
                '/paxos.Paxos/Propose',
                request_serializer=paxos__pb2.ProposeRequest.SerializeToString,
                response_deserializer=paxos__pb2.ProposeReply.FromString,
                )
        self.Prepare = channel.unary_unary(
                '/paxos.Paxos/Prepare',
                request_serializer=paxos__pb2.PrepareRequest.SerializeToString,
                response_deserializer=paxos__pb2.PrepareReply.FromString,
                )
        self.Accept = channel.unary_unary(
                '/paxos.Paxos/Accept',
                request_serializer=paxos__pb2.AcceptRequest.SerializeToString,
                response_deserializer=paxos__pb2.AcceptReply.FromString,
                )


class PaxosServicer(object):
    """python -m grpc_tools.protoc -I protos --python_out=. --pyi_out=. --grpc_python_out=. protos/paxos.proto

    """

    def Propose(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Prepare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Accept(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PaxosServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Propose': grpc.unary_unary_rpc_method_handler(
                    servicer.Propose,
                    request_deserializer=paxos__pb2.ProposeRequest.FromString,
                    response_serializer=paxos__pb2.ProposeReply.SerializeToString,
            ),
            'Prepare': grpc.unary_unary_rpc_method_handler(
                    servicer.Prepare,
                    request_deserializer=paxos__pb2.PrepareRequest.FromString,
                    response_serializer=paxos__pb2.PrepareReply.SerializeToString,
            ),
            'Accept': grpc.unary_unary_rpc_method_handler(
                    servicer.Accept,
                    request_deserializer=paxos__pb2.AcceptRequest.FromString,
                    response_serializer=paxos__pb2.AcceptReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'paxos.Paxos', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Paxos(object):
    """python -m grpc_tools.protoc -I protos --python_out=. --pyi_out=. --grpc_python_out=. protos/paxos.proto

    """

    @staticmethod
    def Propose(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/paxos.Paxos/Propose',
            paxos__pb2.ProposeRequest.SerializeToString,
            paxos__pb2.ProposeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Prepare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/paxos.Paxos/Prepare',
            paxos__pb2.PrepareRequest.SerializeToString,
            paxos__pb2.PrepareReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Accept(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/paxos.Paxos/Accept',
            paxos__pb2.AcceptRequest.SerializeToString,
            paxos__pb2.AcceptReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
